plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.6-SNAPSHOT" apply false
    id "me.modmuss50.mod-publish-plugin" version "0.5.1"
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        // The following line declares the mojmap mappings, you may use other mappings as well
        mappings loom.officialMojangMappings()
        // The following line declares the yarn mappings you may select this one as well.
        // mappings "net.fabricmc:yarn:1.19.2+build.28:v2"
    }
}

configurations.configureEach {
    // Check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"
    apply from: "https://raw.githubusercontent.com/FTBTeam/mods-meta/main/gradle/git-md-changelog.gradle"

    archivesBaseName = rootProject.archives_base_name
    version = rootProject.mod_version
    group = rootProject.maven_group

    // needs to be done AFTER version is set
    apply from: "https://raw.githubusercontent.com/FTBTeam/mods-meta/main/gradle/publishing.gradle"

    repositories {
        mavenLocal()
        maven {
            url "https://maven.architectury.dev/"
        }

        maven {
            url "https://maven.saps.dev/releases"
            content {
                includeGroup "dev.latvian.mods"
                includeGroup "dev.ftb.mods"
                includeGroup "com.github.llamalad7.mixinextras"
            }
        }

        maven {
            url "https://maven.saps.dev/snapshots"
            content {
                includeGroup "dev.latvian.mods"
                includeGroup "dev.ftb.mods"
            }
        }

        maven {
            url "https://maven.blamejared.com"
            content {
                includeGroup "mezz.jei"
                includeGroup "net.darkhax.gamestages"
                includeGroup "com.faux.ingredientextension"
            }
        }

        maven {
            url "https://www.cursemaven.com"
            content {
                includeGroup "curse.maven"
            }
        }
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
        options.release = 21
    }

    java {
        withSourcesJar()
    }

    publishing {
        repositories {
            if (ftbPublishing.ftbToken) {
                maven {
                    url ftbPublishing.ftbURL
                    credentials {
                        username = ftbPublishing.ftbUser
                        password = ftbPublishing.ftbToken
                    }
                }
            }

            if (ftbPublishing.sapsToken) {
                maven {
                    url ftbPublishing.sapsURL
                    credentials {
                        username = ftbPublishing.sapsUser
                        password = ftbPublishing.sapsToken
                    }
                }
            }
        }
    }
}

publishMods {
    dryRun = providers.environmentVariable("CURSEFORGE_KEY").getOrNull() == null
    changelog = providers.environmentVariable("CHANGELOG").getOrElse("No changelog provided")
    version = "${mod_version}"

    // TODO: Migrate to something else
    def tag = providers.environmentVariable("TAG").getOrElse("release")
    type = tag == "beta" ? BETA : (tag == "alpha" ? ALPHA : STABLE)

    def createOptions = (String projectName) -> {
        publishOptions {
            file = project.provider { project(":$projectName").tasks.remapJar }.flatMap { it.archiveFile }
            displayName = "[${projectName.toUpperCase()}][${minecraft_version}] ${readable_name} ${mod_version}"
            modLoaders.add(projectName.toLowerCase())
        }
    }

    def fabricOptions = createOptions("fabric")
    def neoForgeOptions = createOptions("neoforge")
//    def forgeOptions = createOptions("forge")

    def curseForgeOptions = curseforgeOptions {
        accessToken = providers.environmentVariable("CURSEFORGE_KEY")
        projectId = curseforge_id
        minecraftVersions.add("${minecraft_version}")
        requires('architectury-api')
        optional('jei')
        optional('roughly-enough-items')
    }

    curseforge("curseforgeFabric") {
        from(curseForgeOptions, fabricOptions)
        requires('fabric-api')
        requires('ftb-library-fabric')
        optional('ftb-quests-fabric')
        optional('ftb-ranks-fabric')
        optional('waystones-fabric')
    }

    curseforge("curseforgeNeoForge") {
        from(curseForgeOptions, neoForgeOptions)
        requires('ftb-library-neoforge')
        optional('ftb-quests-neoforge')
        optional('ftb-ranks-neoforge')
        optional('waystones')
        optional('kubejs')
    }

//    curseforge("curseforgeForge") {
//        from(curseForgeOptions, forgeOptions)
//        requires('ftb-library-forge')
//        optional('ftb-quests-forge')
//        optional('ftb-ranks-forge')
//        optional('waystones')
//    }
}
