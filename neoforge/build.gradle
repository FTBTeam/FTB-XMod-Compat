plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

def ENV = System.getenv()

architectury {
    platformSetupLoomIde()
    neoForge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

repositories {
    maven {
        url "https://maven.neoforged.net/releases/"
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"
    modApi "dev.architectury:architectury-neoforge:${rootProject.architectury_version}"

    modApi("dev.ftb.mods:ftb-library-neoforge:${rootProject.ftb_library_version}") { transitive false }
    modApi("dev.ftb.mods:ftb-quests-neoforge:${rootProject.ftb_quests_version}")
    modApi("dev.ftb.mods:ftb-chunks-neoforge:${rootProject.ftb_chunks_version}")
    modApi("dev.ftb.mods:ftb-ranks-neoforge:${rootProject.ftb_ranks_version}")
    modApi("dev.ftb.mods:ftb-essentials-neoforge:${rootProject.ftb_essentials_version}")
    modApi("dev.ftb.mods:ftb-teams-neoforge:${rootProject.ftb_teams_version}")

    modCompileOnlyApi("me.shedaniel:RoughlyEnoughItems-neoforge:${rootProject.rei_version}")
    compileOnly("net.luckperms:api:${rootProject.luckperms_api_version}")

    // TODO below here is compile-only for now
    modCompileOnlyApi("net.darkhax.gamestages:GameStages-Forge-1.20.1:${rootProject.gamestages_version}") { transitive false }

    modCompileOnly("dev.latvian.mods:kubejs-forge:${rootProject.kubejs_version}")
    modCompileOnly("curse.maven:balm-531761:${balm_forge_version}")
    modCompileOnly("curse.maven:waystones-245755:${waystones_forge_version}")

    modCompileOnly("mezz.jei:jei-1.20.2-forge-api:${rootProject.jei_version}")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }
}

apply from: "https://raw.githubusercontent.com/FTBTeam/mods-meta/main/gradle/extra-local-mods.gradle"

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version,
                "archversion": project.architectury_version,
                "neoforgeversion": project.neoforge_version,
                "neoforgeloaderversion": project.neoforge_loader_version,
                "mcversion": project.minecraft_version,
                "ftblibraryversion": project.ftb_library_version,
                "ftbquestsversion": project.ftb_quests_version,
                "ftbchunksversion": project.ftb_chunks_version,
                "ftbranksversion": project.ftb_ranks_version,
                "ftbteamsversion": project.ftb_teams_version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    setArchiveClassifier("dev-shadow")
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveBaseName.set "${rootProject.archives_base_name}-${project.name}"
    archiveClassifier.set null
}

jar {
    setArchiveClassifier("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = "${rootProject.archives_base_name}-${project.name}"
            version ftbPublishing.mavenVersion
            from components.java
        }
    }

    repositories {
        if (ftbPublishing.ftbToken) {
            maven {
                url ftbPublishing.ftbURL
                credentials {
                    username = ftbPublishing.ftbUser
                    password = ftbPublishing.ftbToken
                }
            }
        }

        if (ftbPublishing.sapsToken) {
            maven {
                url ftbPublishing.sapsURL
                credentials {
                    username = ftbPublishing.sapsUser
                    password = ftbPublishing.sapsToken
                }
            }
        }
    }
}

if (ENV.CURSEFORGE_KEY) {
    curseforge {
        apiKey = ENV.CURSEFORGE_KEY
        project {
            id = project.curseforge_id
            releaseType = ftbPublishing.relType
            addGameVersion "Forge"
            addGameVersion project.minecraft_version
            mainArtifact(remapJar.archiveFile)
            relations {
                requiredDependency 'architectury-api'
                requiredDependency 'ftb-library-forge'
                optionalDependency 'ftb-quests-forge'
                optionalDependency 'ftb-ranks-forge'
                optionalDependency 'kubejs'
                optionalDependency 'jei'
                optionalDependency 'roughly-enough-items'
                optionalDependency 'game-stages'
                optionalDependency 'waystones'
            }
            changelog = ENV.CHANGELOG  // expected to exist if ENV.CURSEFORGE_KEY does
            changelogType = 'markdown'
        }
    }
}

rootProject.tasks.getByName("curseforgePublish").dependsOn tasks.getByName("curseforge")
